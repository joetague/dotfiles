;; `:aliases` - tools to enhance a development workflow.
;; See https://clojure.org/reference/clojure_cli#aliases and https://clojure.org/reference/deps_edn

;; Keys used within :aliases
;; resolve-deps aliases affect dependency resolution:
;;   `:extra-deps` - libraries merged into the top-level :deps dependencies
;;   `:replace-deps` - libraries replacing all those in the top-level :deps dependencies
;;   `:override-deps` - library version overriding a matching library in the top-level :deps
;;   `:default-deps` - library version if no version is otherwide defined, used across a set of shared projects acting as a dependency management system

;; make-classpath aliases affect the classpath generation:
;;   `:extra-paths` - additional paths to those defined in the top-level :path key
;;   `:replace-paths` - paths replacing all those defined in the top-level :path key
;;   `:override-paths` - alternate location to resolve a dependancy (overrides resolve-deps location)

;; Configuration to run Clojure
;;   `:main-opts` - clojure.main configuration options (vector of strings), e.g. `["--main" "fully.qualified.namespace"]` to set main namespace
;;   `:exec-fn` - clojure.exec fully qualified function name to call (symbol)
;;   `:exec-args` - clojure.exec arguments (hash-map) passed to `:exec-fn`
;; ---------------------------------------------------
{
 :aliases
 {
  ;; Basic REPL UI with nREPL server for CIDER support
  :repl/basic
  {:extra-deps {nrepl/nrepl       {:mvn/version "1.3.0"}
                cider/cider-nrepl {:mvn/version "0.50.2"}}
   :main-opts  ["--main" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "--interactive"]}

  ;; Headless REPL with nREPL server for CIDER support
  :repl/headless
  {:extra-deps {nrepl/nrepl       {:mvn/version "1.3.0"}
                cider/cider-nrepl {:mvn/version "0.50.2"}}
   :main-opts  ["--main" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"]}

  ;; Start REPL with Clerk notebook receiving evaluation results as a tap> source
  ;; Recommend using custom `user` namespace to start Clerk as tap> source
  ;; Alpha stage alias design - may change
  ;; clojure -M:repl/clerk
  :repl/clerk
  {:extra-deps {io.github.nextjournal/clerk   {:mvn/version "0.17.1102"}
                nrepl/nrepl                   {:mvn/version "1.3.0"}
                cider/cider-nrepl             {:mvn/version "0.50.2"}
                refactor-nrepl/refactor-nrepl {:mvn/version "3.10.0"}}
   :main-opts  ["--eval" "(require '[nextjournal.clerk])(nextjournal.clerk/show! 'nextjournal.clerk.tap)(nextjournal.clerk/serve! {:browse? true})"
                "-m" "nrepl.cmdline"
                "--middleware" "[refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]"
                "--interactive"]}

  ;; Rebel Readline enhanced REPL UI
  ;; https://github.com/bhauman/rebel-readline
  ;; REPL UI with syntax highlighting, built in docs and a quit command `:repl/quit`

  ;; clojure -M:repl/rebel
  :repl/rebel
  {:extra-deps {nrepl/nrepl                {:mvn/version "1.3.0"}
                cider/cider-nrepl          {:mvn/version "0.50.2"}
                com.bhauman/rebel-readline {:mvn/version "0.1.4"}}
   :main-opts  ["--eval" "(apply require clojure.main/repl-requires)"
                "--main" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware]"
                "--interactive"
                "-f" "rebel-readline.main/-main"]}

  ;; ------------
  ;; Practicalli REPL Reloaded workflow
  ;; Rich Terminal REPL Prompt with nREPL and Portal connections
  ;; https://practical.li/clojure/clojure-cli/repl-reloaded/
  ;; clojure -M:repl/reloaded
  :repl/reloaded
  {:extra-paths ["dev" "test"]
   :extra-deps {nrepl/nrepl                  {:mvn/version "1.3.0"}
                cider/cider-nrepl            {:mvn/version "0.50.2"}
                com.bhauman/rebel-readline   {:mvn/version "0.1.4"}
                djblue/portal                {:mvn/version "0.58.1"}   ; portal data inspector
                clj-commons/clj-yaml         {:mvn/version "1.0.28"}   ; portal yaml support (optional)
                org.clojure/tools.namespace  {:mvn/version "1.5.0"}
                org.clojure/tools.trace      {:mvn/version "0.8.0"}
                org.slf4j/slf4j-nop          {:mvn/version "2.0.16"}
                com.brunobonacci/mulog       {:mvn/version "0.9.0"}
                lambdaisland/kaocha          {:mvn/version "1.91.1392"}
                org.clojure/test.check       {:mvn/version "1.1.1"}
                ring/ring-mock               {:mvn/version "0.4.0"}
                criterium/criterium          {:mvn/version "0.4.6"}}
   :main-opts  ["--eval" "(apply require clojure.main/repl-requires)"
                "--main" "nrepl.cmdline"
                "--middleware" "[cider.nrepl/cider-middleware,portal.nrepl/wrap-portal]"
                "--interactive"
                "-f" "rebel-readline.main/-main"]}

  ;; Include Rebel Readline library
  :lib/rebel
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}}}

  ;; Remote REPL connection
  ;; Connect to the nREPL server of a remote REPL
  ;; clojure -M:repl/remote --host hostname --port 12345
  ;; replace --host and --port values with that of remote nREPL server
  :repl/remote
  {:extra-deps {nrepl/nrepl {:mvn/version "1.3.0"}}
   :main-opts ["--main" "nrepl.cmdline" "--connect"]}

  ;; Dependency version management
  ;; https://github.com/liquidz/antq
  ;; Manage versions for maven and git dependencies

  ;; - report project dependencies that have newer versions available:
  ;; cd project-directory && clojure -T:search/outdated
  ;; - update library versions in this deps.edn file:
  ;; cd $XDG_CONFIG_HOME/clojure && clojure -T:search/outdated
  :search/outdated
  {:replace-paths ["."]
   :replace-deps  {com.github.liquidz/antq {:mvn/version "2.10.1241"}
                   org.slf4j/slf4j-nop     {:mvn/version "2.0.16"}}
   :exec-fn antq.tool/outdated
   :exec-args {:directory ["."] ; default
               :exclude ["org.clojure/tools.deps.alpha"
                         "org.clojure/clojurescript"]
               ;; :focus ["com.github.liquidz/antq"]
               :skip ["boot" "leiningen"]
               :reporter "table" ; json edn format
               :verbose false
               :upgrade false
               :force   false}}

  ;; Carve - search through code for unused vars and remove them
  ;; clojure -M:search/unused-vars --opts '{:paths ["src" "test"]}'
  :search/unused-vars
  {:extra-deps {borkdude/carve
                {:git/url "https://github.com/borkdude/carve"
                 :sha     "e02b65f9de679450176a3fa26c89ffd5600d7eb8"}}
   :main-opts  ["--main" "carve.main"]}

  ;; Databases and drivers uses only during development
  :lib/next.jdbc
  {:extra-deps {com.github.seancorfield/next.jdbc {:mvn/version "1.3.955"}}}

  ;; H2 embedded database
  :database/h2
  {:extra-deps
   {com.h2database/h2                 {:mvn/version "2.3.232"}
    com.github.seancorfield/next.jdbc {:mvn/version "1.3.955"}}}

  ;; Data Science
  ;; Notebooks for Clojure
  ;; https://github.com/nextjournal/clerk
  ;; Alias can be used as an optional library for projects or REPL workflow
  :lib/clerk
  {:extra-deps {io.github.nextjournal/clerk {:mvn/version "0.17.1102"}}}

  ;; Data inspectors / visualizers
  ;; Portal
  ;; Navigate data - edn, json, transit
  ;; https://github.com/djblue/portal
  :inspect/portal-cli
  {:extra-deps {djblue/portal {:mvn/version "0.58.1"}}}

  :inspect/portal-web
  {:extra-deps {djblue/portal             {:mvn/version "0.58.1"}
                org.clojure/clojurescript {:mvn/version "1.11.60"}}
   :main-opts  ["--main" "cljs.main"]}

  :inspect/portal-node
  {:extra-deps {djblue/portal             {:mvn/version "0.58.1"}
                org.clojure/clojurescript {:mvn/version "1.11.60"}}
   :main-opts  ["--main" "cljs.main" "-re" "node"]}

  ;; Morse - https://github.com/nubank/morse
  :inspect/morse
  {:extra-deps {io.github.nubank/morse
                {:git/tag "v2023.10.06.02" :git/sha "88b5ff7"}}}

  ;; Clojure Specifications
  ;; Clojure spec test.check (clojure spec included in Clojure 1.9 onwards)
  :lib/spec-test
  {:extra-deps
   {org.clojure/test.check {:mvn/version "1.1.1"}}}

  ;; Testing Environment / Libraries
  ;; Include the test directory on the class path
  :test/env
  {:extra-paths ["test"]
   :extra-deps  {org.clojure/test.check {:mvn/version "1.1.1"}}}

  :lib/ring-mock
  {:extra-deps {ring/ring-mock {:mvn/version "0.4.0"}}}

  ;; Test runners
  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner
  ;; clojure -X:test/cognitect
  :test/cognitect
  {:extra-paths ["test"]
   :extra-deps  {io.github.cognitect-labs/test-runner
                 {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
   :main-opts   ["--main" "cognitect.test-runner"]
   :exec-fn cognitect.test-runner.api/test}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  ;; Default test runner using kaocha (change to your own preference)
  ;; clojure -X:test/run
  ;; - `:fail-fast? false` argument to run all tests
  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.91.1392"}}
   :main-opts   ["--main" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? true}}

  :test/run-all
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.91.1392"}}
   :main-opts   ["--main" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? false}}

  ;; Kaocha test runner in watch mode
  ;; clojure -X:test/watch
  ;; - `:fail-fast? false` argument to run all tests
  :test/watch
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha {:mvn/version "1.91.1392"}}
   :main-opts   ["--main" "kaocha.runner" "--watch" "--fail-fast" "--skip-meta" ":slow"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:watch? true
               :randomize? false
               :fail-fast? true}}

  :test/cljs
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha      {:mvn/version "1.91.1392"}
                 lambdaisland/kaocha-cljs {:mvn/version "1.5.154"}}
   :main-opts   ["--main" "kaocha.runner" "unit-cljs"]}

  ;; https://github.com/lambdaisland/kaocha-cucumber
  ;; - used for kaocha-runner.el to run Kaocha test runner in Emacs Cider
  :lib/kaocha
  {:extra-deps {lambdaisland/kaocha {:mvn/version "1.91.1392"}}}

  ;; Test Coverage tools
  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -M:test/coverage
  ;; clojure -X:test/coverage
  :test/coverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage/cloverage {:mvn/version "1.2.4"}}
   :main-opts   ["--main" "cloverage.coverage"
                 "--src-ns-path" "src"
                 "--test-ns-path" "test"]
   :exec-fn     cloverage.coverage/run-project
   :exec-args   {:src-ns-path  ["src"]
                 :test-ns-path ["test"]}}

  ;; Performance testing
  ;; Benchmarking library for Clojure
  ;; https://github.com/hugoduncan/criterium/
  ;; (require '[criterium.core :refer [bench quick-bench]]) ; require criterium
  ;; (bench (adhoc-expression)) ; timing of a self contained expression
  ;;
  ;; (require '[practicalli/namespace-name]) ; require project source code
  ;; (in-ns 'practicalli/namespace-name)
  ;; (quick-bench (project-function args))
  :performance/benchmark
  {:extra-deps {criterium/criterium {:mvn/version "0.4.6"}}}

  ;; clj-memory-meter
  ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
  ;; - (require '[clj-memory-meter.core :as memory-meter])
  ;; - (memory-meter/measure (your-expression))
  :performance/memory-meter
  {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "0.3.0"}}
   :jvm-opts   ["-Djdk.attach.allowAttachSelf"]}

  :end/aliases {}}
 :end/config {}}
